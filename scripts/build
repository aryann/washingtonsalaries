#!/bin/bash

# Sets up the file structure necessary to run the washingtonsalaries
# service. The -d flag allows for local development. If -d is
# ommitted, a deployment tarball is created in the build/ directory.
#
# Usage: build [-d]

set -e

DEBUG=0
if [ ! -z "${1}" ] && [ "${1}" == "-d" ]; then
    DEBUG=1
fi

SCRIPT_ROOT=$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)
ROOT=$(dirname ${SCRIPT_ROOT})
BUILD_DIR=${ROOT}/build

if [ -d ${BUILD_DIR} ]; then
    rm -rf ${BUILD_DIR}
fi
mkdir ${BUILD_DIR}

(
    cd ${BUILD_DIR}
    unzip ${ROOT}/lib/jetty*
    mv jetty* jetty
    (
        cd jetty
        rm -rf \
            start.d/900-demo.ini \
            webapps.demo \
            webapps/ROOT

        # If in debug mode, make symlinks to the client dir to allow
        # for faster development.
        if (( ${DEBUG} )); then
            mkdir webapps/ROOT
            for FILE in $(ls ${ROOT}/client); do
                ln -s ${ROOT}/client/${FILE} webapps/ROOT/${FILE}
            done
        else
            cp -r ${ROOT}/client webapps/ROOT
        fi

        # Copies the Solr dependencies into Jetty's directory.
        cp -r ${ROOT}/solr/home solr
        unzip -d webapps/solr ${ROOT}/lib/solr*/solr*.war
        cp ${ROOT}/lib/solr*/solrj-lib/* lib/ext
    )
)

jetty() {
    local action=${1}
    JAVA_OPTIONS="-Dsolr.solr.home=${BUILD_DIR}/jetty/solr ${JAVA_OPTIONS}" \
        JETTY_HOME=${BUILD_DIR}/jetty \
        JETTY_RUN=/tmp \
        ${BUILD_DIR}/jetty/bin/jetty.sh -d ${action}
}

# jetty.sh does not propagate environment variables from stop to start
# when doing a restart, so we have to invoke a stop and start on our
# own.
jetty stop
jetty start

${SCRIPT_ROOT}/add_to_solr ${ROOT}/data/data.csv \
    8080

jetty stop
cp ${ROOT}/solr/web.xml ${BUILD_DIR}/jetty/webapps/solr/WEB-INF/web.xml
jetty start

if (( ! ${DEBUG} )); then
    (
        cd ${BUILD_DIR}
        tar zcvf deployment.tar.gz jetty
    )
fi
